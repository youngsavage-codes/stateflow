{"code":"import React, { createContext, useContext, useState } from \"react\";\n// Create Contexts\nconst GlobalStateContext = createContext(undefined);\nconst GlobalStateUpdateContext = createContext(undefined);\nexport const GlobalStateProvider = ({ children }) => {\n    const [state, setState] = useState({}); // Initial global state\n    return (React.createElement(GlobalStateContext.Provider, { value: state },\n        React.createElement(GlobalStateUpdateContext.Provider, { value: setState }, children)));\n};\n// Hook to Access State\nexport const useGlobalState = () => {\n    const context = useContext(GlobalStateContext);\n    if (!context) {\n        throw new Error(\"useGlobalState must be used within GlobalStateProvider\");\n    }\n    return context;\n};\n// Hook to Update State\nexport const useSetGlobalState = () => {\n    const context = useContext(GlobalStateUpdateContext);\n    if (!context) {\n        throw new Error(\"useSetGlobalState must be used within GlobalStateProvider\");\n    }\n    return context;\n};\n// Hook to Select State (Optional Advanced Feature)\nexport const useGlobalStateSelector = (selector) => {\n    const state = useGlobalState();\n    return selector(state);\n};\n","references":["C:/Users/User/Documents/GitHub/stateflow/node_modules/@types/react/index.d.ts"],"dts":{"name":"C:/Users/User/Documents/GitHub/stateflow/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"import React, { ReactNode, SetStateAction } from \"react\";\ninterface GlobalState {\n    [key: string]: any;\n}\ninterface GlobalStateProviderProps {\n    children: ReactNode;\n}\nexport declare const GlobalStateProvider: React.FC<GlobalStateProviderProps>;\nexport declare const useGlobalState: () => GlobalState;\nexport declare const useSetGlobalState: () => ((updater: SetStateAction<GlobalState>) => void);\nexport declare const useGlobalStateSelector: <T>(selector: (state: GlobalState) => T) => T;\nexport {};\n"}}
