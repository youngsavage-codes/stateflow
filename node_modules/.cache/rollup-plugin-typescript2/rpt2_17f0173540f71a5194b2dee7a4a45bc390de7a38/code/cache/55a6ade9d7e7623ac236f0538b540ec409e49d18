{"code":"import { createContext, useContext, useState } from \"react\";\n// Create Contexts\nvar GlobalStateContext = createContext(undefined);\nvar GlobalStateUpdateContext = createContext(undefined);\nexport var GlobalStateProvider = function (_a) {\n    var children = _a.children;\n    var _b = useState({}), state = _b[0], setState = _b[1]; // Initial global state\n    return value = { state: state } >\n        value;\n    {\n        setState;\n    }\n     >\n        { children: children }\n        < /GlobalStateUpdateContext.Provider>\n        < /GlobalStateContext.Provider>;\n};\n;\n;\n// Hook to Access State\nexport var useGlobalState = function () {\n    var context = useContext(GlobalStateContext);\n    if (!context) {\n        throw new Error(\"useGlobalState must be used within GlobalStateProvider\");\n    }\n    return context;\n};\n// Hook to Update State\nexport var useSetGlobalState = function () {\n    var context = useContext(GlobalStateUpdateContext);\n    if (!context) {\n        throw new Error(\"useSetGlobalState must be used within GlobalStateProvider\");\n    }\n    return context;\n};\n// Hook to Select State (Optional Advanced Feature)\nexport var useGlobalStateSelector = function (selector) {\n    var state = useGlobalState();\n    return selector(state);\n};\n","references":["C:/Users/User/Documents/GitHub/library/node_modules/@types/react/index.d.ts"],"dts":{"name":"C:/Users/User/Documents/GitHub/library/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"import React, { ReactNode, SetStateAction } from \"react\";\ninterface GlobalState {\n    [key: string]: any;\n}\ninterface GlobalStateProviderProps {\n    children: ReactNode;\n}\nexport declare const GlobalStateProvider: React.FC<GlobalStateProviderProps>;\nexport declare const useGlobalState: () => GlobalState;\nexport declare const useSetGlobalState: () => ((updater: SetStateAction<GlobalState>) => void);\nexport declare const useGlobalStateSelector: <T>(selector: (state: GlobalState) => T) => T;\nexport {};\n"}}
